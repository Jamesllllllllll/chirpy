// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addImage = `-- name: AddImage :one
UPDATE chirps
SET imageURL = $1
WHERE ID = $2
RETURNING id, created_at, updated_at, body, user_id, username, imageurl
`

type AddImageParams struct {
	Imageurl string
	ID       uuid.UUID
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, addImage, arg.Imageurl, arg.ID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Imageurl,
	)
	return i, err
}

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id, username, imageURL)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, ''
)
RETURNING id, created_at, updated_at, body, user_id, username, imageurl
`

type CreateChirpParams struct {
	Body     string
	UserID   uuid.UUID
	Username string
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID, arg.Username)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Imageurl,
	)
	return i, err
}

const deleteAllChirps = `-- name: DeleteAllChirps :exec
TRUNCATE chirps
`

func (q *Queries) DeleteAllChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChirps)
	return err
}

const deleteSingleChirp = `-- name: DeleteSingleChirp :exec
DELETE FROM chirps
WHERE ID = $1
`

func (q *Queries) DeleteSingleChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSingleChirp, id)
	return err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id, created_at, updated_at, body, user_id, username, imageurl FROM chirps
ORDER BY created_at ASC
`

func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.Username,
			&i.Imageurl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirpsByAuthor = `-- name: GetChirpsByAuthor :many
SELECT id, created_at, updated_at, body, user_id, username, imageurl FROM chirps
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetChirpsByAuthor(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpsByAuthor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
			&i.Username,
			&i.Imageurl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleChirp = `-- name: GetSingleChirp :one
SELECT id, created_at, updated_at, body, user_id, username, imageurl FROM chirps
WHERE ID = $1
`

func (q *Queries) GetSingleChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getSingleChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
		&i.Username,
		&i.Imageurl,
	)
	return i, err
}
